word_table <- table(undata)
<- table(undata)
word_table
words <- readLines("yes24.txt")
word_data <- extractNoun(words)
undata <- unlist(word_data)
undata2 <- Filter(function(x) {nchar(x) >= 2}, undata)
word_table <- table(undata2)
word_table
undata2 <- Filter(function(x) {nchar(x) >= 2}, undata)
word_table2 <- table(undata2)
word_table2
head(final, 10)
library("htmlwidgets")
result <- wordcloud2(word_table, shape = 'cardioid')
wordcloud2(word_table, shape = 'cardioid')
result <- wordcloud2(word_table, shape = 'cardioid', fontFamily = "휴먼옛체")
library("htmlwidgets")
words <- readLines("yes24.txt")
word_data <- extractNoun(words)
undata <- unlist(word_data)
undata2 <- Filter(function(x) {nchar(x) >= 2}, undata)
word_table <- table(undata2)
word_table
result <- wordcloud2(word_table, shape = 'cardioid', fontFamily = "휴먼옛체")
saveWidget(result, "wc.html", title = "WORDCLOUD 실습", selfcontained = F)
wordcloud2(word_table, shape = 'cardioid', fontFamily = "휴먼옛체")
wordcloud2(word_table, shape = 'cardioid', fontFamily = "휴먼옛체", size=0.5)
library("htmlwidgets")
words <- readLines("yes24.txt")
word_data <- extractNoun(words)
undata <- unlist(word_data)
undata2 <- Filter(function(x) {nchar(x) >= 2}, undata)
word_table <- table(undata2)
word_table <- sort(word_table, decreasing = T)
result <- wordcloud2(word_table, shape = 'cardioid', fontFamily = "휴먼옛체", size=0.5)
saveWidget(result, "wc.html", title = "WORDCLOUD 실습", selfcontained = F)
library("htmlwidgets")
words <- readLines("yes24.txt")
word_data <- extractNoun(words)
undata <- unlist(word_data)
undata2 <- Filter(function(x) {nchar(x) >= 2}, undata)
word_table <- table(undata2)
word_table <- sort(word_table, decreasing = T)
result <- wordcloud2(word_table, shape = 'pentagon', fontFamily = "휴먼옛체", size=0.5)
saveWidget(result, "wc.html", title = "WORDCLOUD 실습", selfcontained = F)
words <- readLines("yes24.txt")
word_data <- extractNoun(words)
undata <- unlist(word_data)
undata2 <- Filter(function(x) {nchar(x) >= 2}, undata)
word_table <- table(undata2)
word_table <- sort(word_table, decreasing = T)
result <- wordcloud2(word_table, shape = 'pentagon', fontFamily = "휴먼옛체", size=0.5)
saveWidget(result, "wc.html", title = "WORDCLOUD 실습", selfcontained = F)
library("htmlwidgets")
words <- readLines("yes24.txt")
word_data <- extractNoun(words)
undata <- unlist(word_data)
undata2 <- Filter(function(x) {nchar(x) >= 2}, undata)
word_table <- table(undata2)
word_table <- sort(word_table, decreasing = T)
result <- wordcloud2(word_table, shape = 'pentagon', fontFamily = "휴먼옛체", size=0.5)
saveWidget(result, "wc.html", title = "WORDCLOUD 실습", selfcontained = F)
library(wordcloud2)
words <- readLines("yes24.txt")
word_data <- extractNoun(words)
undata <- unlist(word_data)
undata2 <- Filter(function(x) {nchar(x) >= 2}, undata)
word_table <- table(undata2)
word_table <- sort(word_table, decreasing = T)
result <- wordcloud2(word_table, shape = 'pentagon', fontFamily = "휴먼옛체", size=0.5)
saveWidget(result, "wc.html", title = "WORDCLOUD 실습", selfcontained = F)
words <- readLines("yes24.txt")
word_data <- extractNoun(words)
undata <- unlist(word_data)
undata2 <- Filter(function(x) {nchar(x) >= 2}, undata)
word_table <- table(undata2)
word_table <- sort(word_table, decreasing = T)
result <- wordcloud2(word_table, shape = 'pentagon', fontFamily = "휴먼옛체", size=0.5)
saveWidget(result, "wc.html", title = "WORDCLOUD 실습", selfcontained = F)
library(KoNLP)
words <- readLines("yes24.txt")
word_data <- extractNoun(words)
undata <- unlist(word_data)
undata2 <- Filter(function(x) {nchar(x) >= 2}, undata)
word_table <- table(undata2)
word_table <- sort(word_table, decreasing = T)
result <- wordcloud2(word_table, shape = 'pentagon', fontFamily = "휴먼옛체", size=0.5)
saveWidget(result, "wc.html", title = "WORDCLOUD 실습", selfcontained = F)
useSejongDic()
words <- readLines("yes24.txt")
word_data <- extractNoun(words)
undata <- unlist(word_data)
undata2 <- Filter(function(x) {nchar(x) >= 2}, undata)
word_table <- table(undata2)
word_table <- sort(word_table, decreasing = T)
result <- wordcloud2(word_table, shape = 'pentagon', fontFamily = "휴먼옛체", size=0.5)
saveWidget(result, "wc.html", title = "WORDCLOUD 실습", selfcontained = F)
library("htmlwidgets")
library(wordcloud2)
library(KoNLP)
useSejongDic()
words <- readLines("yes24.txt")
word_data <- extractNoun(words)
undata <- unlist(word_data)
undata2 <- Filter(function(x) {nchar(x) >= 2}, undata)
word_table <- table(undata2)
word_table <- sort(word_table, decreasing = T)
result <- wordcloud2(word_table, shape = 'pentagon', fontFamily = "휴먼옛체", size=0.5)
result
saveWidget(result, "wc.html", title = "WORDCLOUD 실습", selfcontained = F)
library(htmlwidgets)
wordcloud2(words,size=0.5,col="random-dark")
(words <- read.csv("data/wc.csv",stringsAsFactors = F))
wordcloud2(words,size=0.5,col="random-dark")
# 테이블을 한방에 읽어오자 : 정적페이지
library(XML)
library(rvest)
url = "https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population"
read1 <- read_html(url)
read2 <- htmlParse(read1)
first_table <- getNodeSet(read2,"//table")[[1]]
xt <- readHTMLTable(first_table)
str(xt)
head(xt)
# http://www.airkorea.or.kr/ : 한국환경공단 실시간 자료 조회
# 테이블을 한방에 읽어오자 : 동적페이지
rm(list=ls())
library(RSelenium)
library(ggplot2)
library(dplyr)
mpg <- as.data.frame(ggplot2::mpg)
str(mpg)
ggplot(mpg, aes(displ, hwy))
ggplot(mpg) + geom_point(aes(displ, hwy))
ggplot(mpg, aes(displ, hwy)) + geom_point()
# x축 displ, y축 hwy로 지정해 배경 생성
sketch <- ggplot(data = mpg, aes(x = displ, y = hwy))
sketch
sketch + geom_point(aes(color=drv))
data(airquality)
str(airquality)
View(airquality)
ggplot(airquality, aes(x=Day, y=Temp))
ggplot(airquality, aes(x=Day, y=Temp)) + geom_point()
ggplot(airquality, aes(x=Day, y=Temp)) + geom_point(size=3, color="red")
ggplot(airquality, aes(x=Day, y=Temp)) + geom_line()
ggplot(airquality, aes(x=Day, y=Temp)) + geom_line() + geom_point()
ggplot(airquality, aes(x=Day, y=Temp)) + geom_line(color="green") + geom_point(size=3)
df_mpg <- mpg %>% group_by(drv) %>%  summarise(mean_hwy = mean(hwy))
df_mpg <- mpg %>% group_by(drv) %>%  summarise(mean_hwy = mean(hwy))
# 집계 막대 그래프 - 미리 집계해서 줘야함
ggplot(data = df_mpg, aes(x = drv, y = mean_hwy)) + geom_col()
str(mtcars)
?mtcars   # ggplot(mtcars, aes(x=factor(cyl)))
View(mtcars)
table(mtcars$cyl)
summary(mtcars$cyl)
ggplot(airquality, aes(x=Day, y=Temp, group=Day)) + geom_boxplot()
ggplot(airquality, aes(Temp)) + geom_histogram()
install.packages("xlsx")
library(xlsx)
read.xlsx("data/data.xlsx", 1, encoding="UTF-8")
classDF <- read.xlsx("data/data.xlsx", 1, encoding="UTF-8")
read.xlsx("data/data.xlsx", 1, encoding="UTF-8")
ggplot(bar_data, aes(x=bloodType)) + geom_bar()
bar_data <- classDF[3]
classDF <- read.xlsx("data/data.xlsx", 1, encoding="UTF-8")
str(classDF)
bar_data <- classDF[3]
bar_data
str(bar_data)
table(bar_data$bloodType)
ggplot(bar_data, aes(x=bloodType)) + geom_bar()
ggplot(classDF, aes(x=bloodType)) + geom_bar(aes(fill=gender))
# 라인차트 생성 - x축은 연도(year), y축은 매출(sales) 매칭
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line()
company <- c('A', 'A', 'A', 'A', 'B', 'B', 'B', 'B')
year <- c('1980', '1990', '2000', '2010', '1980', '1990', '2000', '2010')
sales <- c(2750, 2800, 2830, 2840, 2760, 2765, 2775, 2790)
coSalesDF <- data.frame(company, year, sales)
# 생성된 coSalesDF 확인
coSalesDF
str(coSalesDF)
# 라인차트 생성 - x축은 연도(year), y축은 매출(sales) 매칭
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line()
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(aes(group=company))
# 라인차트 생성 - x축은 연도(year), y축은 매출(sales) 매칭
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line()
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(aes(group=company))
w <- data.frame(year=c("2014", "2015", "2016", "2017", "2018"),
weight=c(65,66,64,68,72))
ggplot(data=w, aes(x=year)) + geom_bar()
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Cylinders)) +
geom_point(colour="grey", shape=21, size=6) +
scale_fill_brewer(palette="Blues") # Blues
library(MASS)
str(Cars93)
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Cylinders)) +
geom_point(colour="grey", shape=21, size=6) +
scale_fill_brewer(palette="Blues") # Blues
ggplot(data=w, aes(x=year, y=weight)) + geom_bar() # 갯수를 세서 막대를 그리는게 기본이라.. 에러난다!!
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity")
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity") + coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), colour="blue", stat="identity") + coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight))+coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=1)+coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=2)+coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=-1)+coord_cartesian(ylim=c(60, 75)) + labs(title = "테스트", subtitle="ggplot2 패키지를 이용한 시각화", x="년도", y="무게")
ggsave("ggplot_test.png")
install.packages("treemap")
# 트리맵 메모리 로드
library(treemap)
install.packages("plotly")
library(plotly)
p <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
p
# 인터랙티브 그래프 만들기
ggplotly(p)
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar()
ggplotly(p)
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = "dodge")
ggplotly(p)
p <- ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point()
ggplotly(p)
sales_df <- read.xlsx("data/data.xlsx", 2, encoding="UTF-8")
# 트리맵 그리기
# index에 표현하고 싶은 계층 순서대로 벡터로 생성. product, region 순으로 벡터를 지정함으로써 product가 region보다 더 상위로 구분이 됨
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황")
install.packages("ggmap")
library(ggmap)
register_google(key='AIzaSyDy81EbO46BRSnX1DOgg_F84bhsdbku2z4')
lon <- 126.9221322
lat <- 37.5268831
cen <- c(lon,lat)
mk <- data.frame(lon=lon, lat=lat)
map <- get_googlemap(center=cen, maptype="roadmap",zoom=1, marker=mk)
Sys.sleep(1)
ggmap(map)
ggmap(map)
map <- get_googlemap(center=cen, maptype="roadmap",zoom=5, marker=mk)
Sys.sleep(1)
ggmap(map)
map <- get_map(location=cen, maptype="toner",zoom=12, marker=mk, source="google")
ggmap(map)
map <- get_map(location=cen, maptype="roadmap",zoom=12, marker=mk, source="stamen")
ggmap(map)
map <- get_map(location=cen, maptype="terrain",zoom=12, marker=mk, source="stamen")
ggmap(map)
mk <- geocode("seoul", source = "google")
print(mk)
cen <- c(mk$lon, mk$lat)
map <- get_googlemap(center=cen, maptype="roadmap",zoom=11, marker=mk)
ggmap(map)
mk <- geocode("seoul", source = "google")
print(mk)
cen <- c(mk$lon, mk$lat)
map <- get_googlemap(center=cen, maptype="roadmap",zoom=11, marker=mk)
ggmap(map)
names <- c("용두암","성산일출봉","정방폭포",
"중문관광단지","한라산1100고지","차귀도")
addr <- c("제주시 용두암길 15",
"서귀포시 성산읍 성산리",
"서귀포시 동홍동 299-3",
"서귀포시 중문동 2624-1",
"서귀포시 색달동 산1-2",
"제주시 한경면 고산리 125")
gc <- geocode(enc2utf8(addr))
gc
df <- data.frame(name=names,
lon=gc$lon,
lat=gc$lat)
cen <- c(mean(df$lon),mean(df$lat))
map <- get_googlemap(center=cen,
maptype="roadmap",
zoom=10,
size=c(640,640),
marker=gc)
Sys.sleep(2)
ggmap(map)
ggmap(map) + geom_text(data=df,
aes(x=lon,y=lat,colour="magenta"),
size=3,
label=df$name) + guides(color=F)
df$gpsX <- as.numeric(as.character(df$gpsX))
df$gpsY <- as.numeric(as.character(df$gpsY))
gc <- data.frame(lon=df$gpsX, lat=df$gpsY);gc
cen <- c(mean(gc$lon), mean(gc$lat))
map <- get_googlemap(center=cen, maptype="roadmap",zoom=12, marker=gc)
Sys.sleep(2)
ggmap(map)
library(XML)
API_key  <- "%2BjzsSyNtwmcqxUsGnflvs3rW2oceFvhHR8AFkM3ao%2Fw50hwHXgGyPVutXw04uAXvrkoWgkoScvvhlH7jgD4%2FRQ%3D%3D"
bus_No <- "360"
url <- paste("http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList?ServiceKey=", API_key, "&strSrch=", bus_No, sep="")
doc <- xmlParse(url)
top <- xmlRoot(doc) ; top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList[1]")); df
busRouteId <- df$busRouteId
busRouteId
url <- paste("http://ws.bus.go.kr/api/rest/buspos/getBusPosByRtid?ServiceKey=", API_key, "&busRouteId=", busRouteId, sep="")
doc <- xmlParse(url)
top <- xmlRoot(doc); top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList")); df
df$gpsX <- as.numeric(as.character(df$gpsX))
df$gpsY <- as.numeric(as.character(df$gpsY))
gc <- data.frame(lon=df$gpsX, lat=df$gpsY);gc
cen <- c(mean(gc$lon), mean(gc$lat))
map <- get_googlemap(center=cen, maptype="roadmap",zoom=12, marker=gc)
Sys.sleep(2)
ggmap(map)
library(dplyr)
library(ggmap)
library(ggplot2)
geocode('Seoul', source = 'google')
geocode('Seoul', source = 'google', output = 'latlona')
geocode(enc2utf8('서울'), source = 'google')
geocode(enc2utf8('서울'), source = 'google', output = 'latlona')
geocode(enc2utf8('서울&language=ko'), source = 'google', output = 'latlona')
station_list = c('시청역', '을지로입구역', '을지로3가역', '을지로4가역',
'동대문역사문화공원역', '신당역', '상왕십리역', '왕십리역', '한양대역',
'뚝섬역', '성수역', '건대입구역', '구의역', '강변역', '잠실나루역',
'잠실역', '신천역', '종합운동장역', '삼성역', '선릉역', '역삼역',
'강남역', '2호선 교대역', '서초역', '방배역', '사당역', '낙성대역',
'서울대입구역', '봉천역', '신림역', '신대방역', '구로디지털단지역',
'대림역', '신도림역', '문래역', '영등포구청역', '당산역', '합정역',
'홍대입구역', '신촌역', '이대역', '아현역', '충정로역')
station_df = data.frame(station_list)
station_df$station_list = enc2utf8(station_df$station_list)
station_lonlat = mutate_geocode(station_df, station_list, source = 'google')
station_lonlat
save(station_lonlat, file="station_lonlat.rda") # 두 번째 테스트부터는 저장했다가 읽자구요
#load("station_lonlat.rda")
qmap('seoul', zoom = 11) # qmap() 은 get_map() + ggmap() 효과
qmap(seoul_lonlat, zoom = 11, source = 'stamen', maptype = 'toner')
seoul_lonlat = unlist(geocode('seoul', source = 'google'))
qmap('seoul', zoom = 11) # qmap() 은 get_map() + ggmap() 효과
qmap(seoul_lonlat, zoom = 11, source = 'stamen', maptype = 'toner')
seoul_map <- qmap('Seoul', zoom = 11, source = 'stamen', maptype = 'toner')
seoul_map + geom_point(data = station_lonlat, aes(x = lon, y = lat), colour = 'green',
size = 4)
df <- read.csv("data/전국전기차충전소표준데이터.csv")
str(df)
head(df); View(df)
df_add <- df[,c(13, 17, 18)]
names(df_add) <- c("address", "lat", "lon")
View(df_add)
map_korea <- get_map(location="southKorea", zoom=7, maptype="roadmap")
ggmap(map_korea)+geom_point(data=df_add, aes(x=lon, y=lat), alpha=0.5, size=2, color="red")
map_korea <- get_map(location="southKorea", zoom=7, maptype="roadmap")
ggmap(map_korea)+geom_point(data=df_add, aes(x=lon, y=lat), alpha=0.5, size=2, color="red")
map_seoul <- get_map(location="seoul", zoom=11, maptype="roadmap")
ggmap(map_seoul)+geom_point(data=df_add, aes(x=lon, y=lat), alpha=0.5, size=5, color="blue")
install.packages("leaflet")
library(leaflet)
library(dplyr)
library(ggmap)
seoul_lonlat<-geocode("seoul")
leaflet()
leaflet() %>% addTiles()
map0 <- leaflet() %>% setView(lng = seoul_lonlat$lon, lat = seoul_lonlat$lat, zoom = 16)
map0
map1 <- map0 %>% addTiles()
map1
mk <- multi_lonlat
lon <- mk$lon
lat <- mk$lat
msg <- '<strong><a href="http://www.multicampus.co.kr" style="text-decoration:none" >멀티캠퍼스</a></strong><hr>우리가 공부하는 곳 ㅎㅎ'
mk <- geocode("seoul", source = "google")
print(mk)
cen <- c(mk$lon, mk$lat)
map <- get_googlemap(center=cen, maptype="roadmap",zoom=11, marker=mk)
ggmap(map)
mk <- geocode(enc2utf8("부산"), source = "google")
cen <- c(mk$lon, mk$lat)
map <- get_googlemap(center=cen, maptype="roadmap",zoom=11, marker=mk)
ggmap(map)
multi_lonlat <- geocode(enc2utf8("강남구 삼성동 151-7"), source = "google")
mk <- multi_lonlat
cen <- c(mk$lon, mk$lat)
map <- get_googlemap(center=cen, maptype="roadmap",zoom=16)
ggmap(map) +
geom_point(aes(x=mk$lon, y=mk$lat), alpha=0.4, size=5, color="pink") +
geom_text(aes(x=mk$lon, y=mk$lat, label="우리가 공부하는 곳", vjust=0, hjust=0))
mk <- multi_lonlat
lon <- mk$lon
lat <- mk$lat
msg <- '<strong><a href="http://www.multicampus.co.kr" style="text-decoration:none" >멀티캠퍼스</a></strong><hr>우리가 공부하는 곳 ㅎㅎ'
map2 <- leaflet() %>% setView(lng = mk$lon, lat = mk$lat, zoom = 16) %>% addTiles() %>%
addCircles(lng = lon, lat = lat, color='green', popup = msg )
map2
content1 <- paste(sep = '<br/>',"<b><a href='https://www.seoul.go.kr/main/index.jsp'>서울시청</a></b>",'아름다운 서울','코로나 이겨냅시다!!')
map3<-leaflet() %>% addTiles() %>%  addPopups(126.97797, 37.56654, content1, options = popupOptions())
map3
content2 <- paste(sep = '<br/>',"<b><a href='http://www.snmb.mil.kr/mbshome/mbs/snmb/'>국립서울현충원</a></b>",'1955년에 개장', '2013년 ‘서울 미래유산’으로 등재')
map3<-leaflet() %>% addTiles() %>%  addPopups(c(126.97797, 126.97797),  c(37.56654, 37.50124) , c(content1, content2), options = popupOptions(closeButton = FALSE) )
map3
wifi_data = read.csv('data/wifi_data.csv', encoding = 'utf-8', stringsAsFactors = FALSE)
View(wifi_data)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1],
lat = seoul_lonlat[2],
zoom = 11) %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat)
wifi_data = read.csv('data/wifi_data.csv', encoding = 'utf-8', stringsAsFactors = FALSE)
View(wifi_data)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1],
lat = seoul_lonlat[2],
zoom = 11) %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('Stamen.Toner') %>%
addCircles(lng = ~lon, lat = ~lat)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('CartoDB.Positron') %>%
addCircles(lng = ~lon, lat = ~lat)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('Stamen.Toner') %>%
addCircles(lng = ~lon, lat = ~lat, popup = ~div)
telecom_color = colorFactor('Set1', wifi_data$div)
telecom_color(wifi_data$div)
mode(telecom_color)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('Stamen.Toner') %>%
addCircles(lng = ~lon, lat=~lat, popup = ~div, color = ~telecom_color(div))
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('Stamen.Toner') %>%
addCircles(lng = ~lon, lat = ~lat, popup = ~div)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('CartoDB.Positron') %>%
addCircles(lng = ~lon, lat = ~lat)
map2 <- leaflet() %>% setView(lng = mk$lon, lat = mk$lat, zoom = 1) %>% addTiles() %>%
addCircles(lng = lon, lat = lat, color='green', popup = msg )
map2
msg <- '<strong><a href="http://www.multicampus.co.kr" style="text-decoration:none" >멀티캠퍼스</a></strong><hr>우리가 공부하는 곳 ㅎㅎ'
map2 <- leaflet() %>% setView(lng = mk$lon, lat = mk$lat, zoom = 16) %>% addTiles() %>%
addCircles(lng = lon, lat = lat, color='green', popup = msg )
map2
content2 <- paste(sep = '<br/>',"<b><a href='http://www.snmb.mil.kr/mbshome/mbs/snmb/'>국립서울현충원</a></b>",'1955년에 개장', '2013년 ‘서울 미래유산’으로 등재')
map3<-leaflet() %>% addTiles() %>%  addPopups(c(126.97797, 126.97797),  c(37.56654, 37.50124) , c(content1, content2), options = popupOptions(closeButton = FALSE) )
map3
content1 <- paste(sep = '<br/>',"<b><a href='https://www.seoul.go.kr/main/index.jsp'>서울시청</a></b>",'아름다운 서울','코로나 이겨냅시다!!')
map3<-leaflet() %>% addTiles() %>%  addPopups(126.97797, 37.56654, content1, options = popupOptions())
map3
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('Stamen.Toner') %>%
addCircles(lng = ~lon, lat = ~lat)
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = "dodge")
ggplotly(p)
p <- ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point()
ggplotly(p)
p <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
p
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = "dodge")
ggplotly(p)
View(mpg)
# 1-6
summary(mpg)
mpg3 %>%
filter(class %in% c("suv", "compact"))
mpg %>%
select(class, cty) -> mpg3
mpg3 %>%
filter(class %in% c("suv", "compact"))
mpg3 %>%
filter(class %in% c("suv", "compact")) %>%
group_by(class) %>%
summarise(mean(cty))
mpg %>%
filter(manufacturer %in% c("audi", "toyota")) %>%
summarise(mean(cty))
mpg %>%
filter(manufacturer %in% c("audi", "toyota"))
mpg %>%
filter(manufacturer %in% c("audi", "toyota")) %>%
summarise(mean(cty))
mpg3 %>%
filter(class %in% c("suv", "compact")) %>%
group_by(class) %>%
mpg3 %>%
filter(class %in% c("suv", "compact")) %>%
group_by(class)
mpg3 %>%
filter(class %in% c("suv", "compact")) %>%
group_by(class)
mpg3 %>%
filter(class %in% c("suv", "compact")) %>%
group_by(class) %>%
summarise(mean(cty))
mpg %>%
filter(manufacturer %in% c("audi", "toyota")) %>%
summarise(mean(cty))
mpg %>%
filter(manufacturer %in% c("audi", "toyota")) %>%
group_by(manufacturer) %>%
summarise(mean(cty))
library(dplyr)
library(ggplot2)
str(ggplot2::mpg)
mpg <- as.data.frame(ggplot2::mpg)
midwest <- as.data.frame(ggplot2::midwest)
