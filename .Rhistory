v2
search()
library(showtext)
showtext_auto()
font_add(family = "cat", regular = "fonts/HoonWhitecatR.ttf")
font_add(family = "dog", regular = "fonts/THEdog.ttf")
font_add(family = "maple", regular = "fonts/MaplestoryBold.ttf")
rainbow(10)
국어<- c(4,7,6,8,5,5,9,10,4,10)
plot(국어)
rainbow(10)
국어 <- c(4,7,6,8,5,5,9,10,4,10)
수학 <- c(7,4,7,3,8,10,4,10,5,7)
plot(국어, type="o", col="blue")
lines(수학, type="o", pch=16, lty=2, col="red")
title(main="성적그래프", col.main="red", font.main=3)
국어 <- c(4,7,6,8,5,5,9,10,4,10)
par(mar=c(1,1,1,1), mfrow=c(4,2))
plot(국어, type="p", col="blue", main="type = p", xaxt="n", yaxt="n")
plot(국어, type="l", col="blue", main="type = l", xaxt="n", yaxt="n")
plot(국어, type="b", col="blue", main="type = b", xaxt="n", yaxt="n")
plot(국어, type="c", col="blue", main="type = c", xaxt="n", yaxt="n")
plot(국어, type="o", col="blue", main="type = o", xaxt="n", yaxt="n")
plot(국어, type="h", col="blue", main="type = h", xaxt="n", yaxt="n")
plot(국어, type="s", col="blue", main="type = s", xaxt="n", yaxt="n")
plot(국어, type="S", col="blue", main="type = S", xaxt="n", yaxt="n")
par(mar=c(5,5,5,5), mfrow=c(1,1))
국어 <- c(4,7,6,8,5,5,9,10,4,10);
수학 <- c(7,4,7,3,8,10,4,10,5,7)
plot(국어, type="o", col="blue", ylim=c(0,10), axes=FALSE, ann=FALSE)
# x, y 축 추가하기
axis(1, at=1:10, lab=c("01","02","03","04", "05","06","07","08","09","10"), family="maple") # x축 추가
axis(2, at=c(0,2,4,6,8,10), family="maple")  # y축 추가
# 그래프 추가하고, 그래프에 박스 그리기
lines(수학, type="o", pch=16, lty=2, col="red")
box()   # 박스 그리기
# 그래프 제목, 축의 제목, 범례 나타내기
title(main="성적그래프", col.main="red", font.main=4, family="maple")
title(xlab="학번", col.lab=rgb(0,1,0), family="maple")
title(ylab="점수", col.lab=rgb(1,0,0), family="maple")
legend(8, 3, c("국어","수학"), cex=0.8, col=c("blue","red"), pch=c(21,16), lty=c(1,2), family="maple")
legend(8, 3, c("국어","수학"), cex=0.8, col=c("blue","red"), pch=c(21,16), lty=c(1,2), family="maple")
legend(8, 3, c("국어","수학"), cex=0.8, col=c("blue","red"), pch=c(21,16), lty=c(1,2), family="maple")
legend(8, 3, c("국어","수학"), cex=0.8, col=c("blue","red"), pch=c(21,16), lty=c(1,2))
plot(국어, type="o", col="blue", ylim=c(0,10), axes=FALSE, ann=FALSE)
# x, y 축 추가하기
axis(1, at=1:10, lab=c("01","02","03","04", "05","06","07","08","09","10"), family="maple") # x축 추가
axis(2, at=c(0,2,4,6,8,10), family="maple")  # y축 추가
# 그래프 추가하고, 그래프에 박스 그리기
lines(수학, type="o", pch=16, lty=2, col="red")
box()   # 박스 그리기
# 그래프 제목, 축의 제목, 범례 나타내기
title(main="성적그래프", col.main="red", font.main=4, family="maple")
title(xlab="학번", col.lab=rgb(0,1,0), family="maple")
title(ylab="점수", col.lab=rgb(1,0,0), family="maple")
legend(8, 3, c("국어","수학"), cex=0.8, col=c("blue","red"), pch=c(21,16), lty=c(1,2))
plot(국어, type="o", col="blue", ylim=c(0,10), axes=FALSE, ann=FALSE)
# x, y 축 추가하기
axis(1, at=1:10, lab=c("01","02","03","04", "05","06","07","08","09","10"), family="maple") # x축 추가
axis(2, at=c(0,2,4,6,8,10), family="maple")  # y축 추가
# 그래프 추가하고, 그래프에 박스 그리기
lines(수학, type="o", pch=16, lty=2, col="red")
box()   # 박스 그리기
# 그래프 제목, 축의 제목, 범례 나타내기
title(main="성적그래프", col.main="red", font.main=4, family="maple")
title(xlab="학번", col.lab=rgb(0,1,0), family="maple")
title(ylab="점수", col.lab=rgb(1,0,0), family="maple")
legend(8, 3, c("국어","수학"), cex=0.8, col=c("blue","red"), pch=c(21,16), lty=c(1,2))
plot(국어, type="o", col="blue", ylim=c(0,10), axes=FALSE, ann=FALSE)
# x, y 축 추가하기
axis(1, at=1:10, lab=c("01","02","03","04", "05","06","07","08","09","10"), family="maple") # x축 추가
axis(2, at=c(0,2,4,6,8,10), family="maple")  # y축 추가
# 그래프 추가하고, 그래프에 박스 그리기
lines(수학, type="o", pch=16, lty=2, col="red")
box()   # 박스 그리기
# 그래프 제목, 축의 제목, 범례 나타내기
title(main="성적그래프", col.main="red", font.main=4, family="maple")
title(xlab="학번", col.lab=rgb(0,1,0), family="maple")
title(ylab="점수", col.lab=rgb(1,0,0), family="maple")
legend(8, 3, c("국어","수학"), cex=0.8, col=c("blue","red"), pch=c(21,16), lty=c(1,2))
(성적 <- read.table("data/성적.txt", header=TRUE))
png(filename="성적.png", height=400, width=700, bg="white") # 출력을 png파일로 설정
plot(성적$국어, type="o", col=pcols[1], ylim=c(0, ymax), axes=FALSE, ann=FALSE)
axis(1, at=1:10, lab=c("01","02","03","04","05","06","07","08","09","10"))
axis(2, at=c(0,2,4,6,8,10), lab=c(0,2,4,6,8,10))
box()
lines(성적$수학, type="o", pch=16, lty=2, col=pcols[2])
lines(성적$영어, type="o", pch=23, lty=3, col=pcols[3] )
title(main="성적그래프", col.main="red", font.main=4)
title(xlab="학번", col.lab=rgb(1,0,0))
title(ylab="점수", col.lab=rgb(0,0,1))
legend(1, ymax, names(성적)[c(3,4,5)], cex=0.8, col=pcols, pch=c(21,16,23), lty=c(1,2,3))
dev.off()
plot(성적$학번, 성적$국어, main="성적그래프", xlab="학번", ylab="점수",  xlim=c(0, 11), ylim=c(0, 11))
ymax <- max(성적[3:5]) #성적 데이터 중에서 최대값을 찾는다(y 축의 크기 제한)
ymax
pcols<- c("red","blue","green")
png(filename="성적.png", height=400, width=700, bg="white") # 출력을 png파일로 설정
plot(성적$국어, type="o", col=pcols[1], ylim=c(0, ymax), axes=FALSE, ann=FALSE)
axis(1, at=1:10, lab=c("01","02","03","04","05","06","07","08","09","10"))
axis(2, at=c(0,2,4,6,8,10), lab=c(0,2,4,6,8,10))
box()
lines(성적$수학, type="o", pch=16, lty=2, col=pcols[2])
lines(성적$영어, type="o", pch=23, lty=3, col=pcols[3] )
title(main="성적그래프", col.main="red", font.main=4)
title(xlab="학번", col.lab=rgb(1,0,0))
title(ylab="점수", col.lab=rgb(0,0,1))
legend(1, ymax, names(성적)[c(3,4,5)], cex=0.8, col=pcols, pch=c(21,16,23), lty=c(1,2,3))
dev.off()
plot(국어, 수학)
plot(수학~국어)
barplot(국어)
성적
library(showtext)
showtext_auto()
font_add(family = "cat", regular = "fonts/HoonWhitecatR.ttf")
font_add(family = "dog", regular = "fonts/THEdog.ttf")
font_add(family = "maple", regular = "fonts/MaplestoryBold.ttf")
국어
# 막대그래프 그리기
ls()
barplot(국어)
coldens <- seq(from=10, to=100, by=10)   # 막대그래프의 색밀도 설정을 위한 벡터
xname <- 성적$학번                                         # X 축 값 설정위한  벡터
barplot(성적$국어, main="성적그래프", xlab="학번", ylab="점수", border="red", col="green", density=coldens, names.arg=xname, family="dog")
# 학생의 각 과목에 대한 각각의 점수에 대한 그래프
성적1<- 성적[3:5]
str(성적1)
par(mar=c(5,5,5,5), mfrow=c(1,1))
as.matrix(성적1)
barplot(as.matrix(성적1), main="성적그래프", beside=T, ylab="점수", col=rainbow(10), family="cat")
as.matrix(성적1)
t(성적1)
par(mar=c(5,5,5,5), mfrow=c(1,2))
barplot(as.matrix(성적1), main="성적그래프", ylab="점수", col=rainbow(10))
barplot(t(성적1), main="성적그래프", ylab="점수", col=rainbow(10))
par(mar=c(5,5,5,5), mfrow=c(1,2))
barplot(as.matrix(성적1), main="성적그래프", ylab="점수", col=rainbow(10))
barplot(t(성적1), main="성적그래프", ylab="점수", col=rainbow(10))
par()
par(mar=c(5,5,5,5), mfrow=c(1,1))
par()
xname <- 성적$학번;    #  x축 레이블용 벡터
par(xpd=T, mar=par()$mar+c(0,0,0,4));   # 우측에 범례가 들어갈 여백을 확보
barplot(t(성적1), main="성적그래프", ylab="점수", col=rainbow(3), space=0.1, cex.axis=0.8, names.arg=xname, cex=0.8)
legend(11,30, names(성적1), cex=0.8, fill=rainbow(3));
par(mar=c(5,5,5,5), mfrow=c(1,1))
xname <- 성적$학번;    #  x축 레이블용 벡터
par(xpd=T, mar=par()$mar+c(0,0,0,4));   # 우측에 범례가 들어갈 여백을 확보
barplot(t(성적1), main="성적그래프", ylab="점수", col=rainbow(3), space=0.1, cex.axis=0.8, names.arg=xname, cex=0.8)
legend(11,30, names(성적1), cex=0.8, fill=rainbow(3));
par(xpd=T, mar=c(5,5,5,5));   # 우측에 범례가 들어갈 여백을 확보
barplot(t(성적1), main="성적그래프", ylab="점수", col=rainbow(3), space=0.1, cex.axis=0.8, names.arg=xname, cex=0.8)
legend(11,30, names(성적1), cex=0.8, fill=rainbow(3));
xname <- 성적$학번;    #  x축 레이블용 벡터
barplot(t(성적1), main="성적그래프", ylab="학번", col=rainbow(3), space=0.1, cex.axis=2.0, names.arg=xname,cex.lab=3.0, horiz=T);
legend(30,11, names(성적1), cex=0.8, fill=rainbow(3))
pie(성적$국어, labels=paste(성적$성명, "-", 성적$국어), col=rainbow(10))
pie(성적$국어, clockwise=T, labels=paste(성적$성명, "-", 성적$국어), col=rainbow(10))
pie(성적$국어, density=10, clockwise=T, labels=paste(성적$성명, "-", 성적$국어), col=rainbow(10))
pie(성적$국어, labels=paste(성적$성명, "-", 성적$국어), col=rainbow(10), main="국어성적", edges=10)
pie(성적$국어, labels=paste(성적$성명,"\n","(",성적$국어,")"), col=rainbow(10))
pie(rep(1, 24), col = rainbow(24), radius = 0.5)
# 히스토그램
hist(성적$국어, main="성적분포-국어",
xlab="점수", breaks=5,
col = "lightblue", border = "pink", family='dog')
hist(성적$수학, main="성적분포-수학",
xlab="점수", col = "lightblue",
breaks=2, border = "pink")
hist(성적$국어, main="성적분포-국어",
xlab="점수", ylab="도수",
col=rainbow(12), border = "pink")
nums <- sample(1:100, 30)
hist(nums, family='maple')
hist(nums, breaks=c(0,10,20,30,40,50,60,70,80,90,100))
hist(nums, breaks=c(0,50,100), probability = T)
hist(nums, breaks=c(0,33,66,100))
hist(nums, breaks=c(0,50,100))
hist(nums, breaks=c(0,50,100), probability = T)
hist(nums, breaks=c(0,33,66,100))
hist(nums, breaks=c(0,10,20,30,40,50,60,70,80,90,100))
hist(nums, breaks=c(0,33,66,100))
data <- read.table("data/온도.txt", header=TRUE, sep=",")
head(data, n=5)
dim(data)
boxplot(성적2, col=rainbow(3), ylim=c(0,10), ylab="성적")
boxplot(성적2, col=rainbow(3), ylim=c(0,10), ylab="성적")
성적2 <- 성적[,3:5]
boxplot(성적2, col=rainbow(3), ylim=c(0,10), ylab="성적")
boxplot(data)
boxplot(data, las = 2)
boxplot(data)
boxplot(data, las = 2)
boxplot(data, las = 2)
boxplot(data, las = 2, at = c(1,2,3,4, 6,7,8,9, 11,12,13,14))
chtcols = rep(c("red","sienna","palevioletred1","royalblue2"), times=3)
chtcols
boxplot(data, las = 2, at = c(1,2,3,4, 6,7,8,9, 11,12,13,14), col=chtcols)
grid(col="gray", lty=2, lwd=1)
boxplot(data, family='maple')  # 안됨!! 다른 아이들은 다 되는데!!
boxplot(data, axes=F)
axis(1, at=1:12, lab=names(data), family="maple") # x축 추가
axis(2, at=seq(-5, 15, 5), family="dog")
title("다양하게 폰트를 지정한 박스플롯", family="cat", cex.main=2)
box()
dev.copy(png, "mytest.png")
dev.off()
conn <- dbConnect(drv, "jdbc:mysql://localhost:3306/work", "scott", "tiger")
drv <- JDBC(driverClass = 'org.mariadb.jdbc.Driver',
'mariadb-java-client-2.6.2.jar')
conn <- dbConnect(drv, "jdbc:mysql://localhost:3306/work", "scott", "tiger")
# 문제1
dbReadTable(conn, "productlog")
query <- "select *from productlog where pid"
dbGetQuery(conn, query)
# 문제1
dbReadTable(conn, "productlog$pid")
query
dbGetQuery(conn, query)
productlog
# 문제1
상품ID <- dbReadTable(conn, "productlog")
상품ID
# 문제1
productlog <- dbReadTable(conn, "productlog")
상품ID <- productlog$pid
상품ID
barplot(국어)
coldens <- seq(from=10, to=100, by=10)   # 막대그래프의 색밀도 설정을 위한 벡터
xname <- 성적$학번                                         # X 축 값 설정위한  벡터
barplot(성적$국어, main="성적그래프", xlab="학번", ylab="점수", border="red", col="green", density=coldens, names.arg=xname, family="dog")
성적
국어
xname <- 성적$학번                                         # X 축 값 설정위한  벡터
barplot(성적$국어, main="성적그래프", xlab="학번", ylab="점수", border="red", col="green", density=coldens, names.arg=xname, family="dog")
coldens <- seq(from=10, to=100, by=10)   # 막대그래프의 색밀도 설정을 위한 벡터
coldens
barplot(productlog$pid, main = "세로바 그래프 실습", xlab="상품ID", ylab="클릭수", col="terrain.colors", )
barplot(productlog$pid, main = "세로바 그래프 실습", xlab="상품ID", ylab="클릭수", col="terrain.colors", )
barplot(productlog$pid, main = "세로바 그래프 실습", xlab="상품ID", ylab="클릭수", col="terrain.colors" )
xname <- 성적$학번                                         # X 축 값 설정위한  벡터
barplot(성적$국어, main="성적그래프", xlab="학번1", ylab="점수", border="red", col="green", density=coldens, names.arg=xname, family="dog")
xname <- 성적$학번                                         # X 축 값 설정위한  벡터
barplot(성적$국어, main="성적그래프", xlab="학번", ylab="점수", border="red", col="green", density=coldens, names.arg=xname, family="dog")
# 문제1
productlog <- dbReadTable(conn, "productlog")
barplot(productlog$pid, main = "세로바 그래프 실습", xlab="상품ID", ylab="클릭수", col="terrain.colors" )
productlog$pid
성적$국어
성적1<- 성적[3:5]
str(성적1)
barplot(as.matrix(성적1), main="성적그래프", beside=T, ylab="점수", col=rainbow(10), family="cat")
# 학생의 각 과목에 대한 합계 점수에 대한 그래프(가로막대 그래프)
xname <- 성적$학번;    #  x축 레이블용 벡터
barplot(t(성적1), main="성적그래프", ylab="학번", col=rainbow(3), space=0.1, cex.axis=2.0, names.arg=xname,cex.lab=3.0, horiz=T);
legend(30,11, names(성적1), cex=0.8, fill=rainbow(3))
xname <- 성적$학번                                         # X 축 값 설정위한  벡터
barplot(성적$국어, main="성적그래프", xlab="학번", ylab="점수", border="red", col="green", density=coldens, names.arg=xname, family="dog")
성적
xname <- productlog$pid
barplot(productlog$pid, main = "세로바 그래프 실습", xlab="상품ID", ylab="클릭수", col="terrain.colors", names.arg=xname )
query -> "select *from productlog where pid = 'p001'"
query
dbGetQuery(conn, query)
dbGetQuery(conn, query)
# 데이터베이스로부터 레코드 검색, 추가, 수정, 삭제
query <- "select * from goods"
goodsAll <- dbGetQuery(conn, query)
dbGetQuery(conn, query)
query = "select * from goods where su >=3"
dbGetQuery(conn,query)
productlog
p001 <- dbGetQuery(conn, query)
p001
# 문제1
productlog <- dbReadTable(conn, "productlog")
query -> "select *from productlog where pid = 'p001'"
p001 <- dbGetQuery(conn, query)
p001
productlog <- dbReadTable(conn, "productlog")
query -> "select *from productlog where pid = 'p001'"
p001 <- dbGetQuery(conn, query)
p001
drv <- JDBC(driverClass = 'org.mariadb.jdbc.Driver',
'mariadb-java-client-2.6.2.jar')
conn <- dbConnect(drv, "jdbc:mysql://localhost:3306/work", "scott", "tiger")
query -> "select *from productlog where pid = 'p001'"
p001 <- dbGetQuery(conn, query)
p001
# 문제1
productlog <- dbReadTable(conn, "productlog")
query <- "select *from productlog where pid = 'p001'"
p001 <- dbGetQuery(conn, query)
p001
p001 <- length(dbGetQuery(conn, query))
p001
data <- table(productlog$pid)
data
library(dplyr)
str(ggplot2::mpg)
head(ggplot2::mpg)
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)
exam <- read.csv("data/csv_exam.csv")
str(exam)
head(exam);tail(exam)
View(exam)
exam <- read.csv("data/csv_exam.csv")
str(exam)
dim(exam)
head(exam);tail(exam)
# exam에서 class가 1인 경우만 추출하여 출력
exam %>% filter(class == 1) # [참고] 단축키 [Ctrl+Shit+M]으로 %>% 기호 입력
# 2반인 경우만 추출
exam %>% filter(class == 2)
# 1반이 아닌 경우
exam %>% filter(class != 1)
# 3반이 아닌 경우
exam %>% filter(class != 3)
# 수학 점수가 50점을 초과한 경우
exam %>% filter(math > 50)
# 수학 점수가 50점 미만인 경우
exam %>% filter(math < 50)
# 영어점수가 80점 이상인 경우
exam %>% filter(english >= 80)
# 영어점수가 80점 이하인 경우
exam %>% filter(english <= 80)
# 1반 이면서 수학 점수가 50점 이상인 경우
exam %>% filter(class == 1 & math >= 50)
# 2반 이면서 영어점수가 80점 이상인 경우
exam %>% filter(class == 2 & english >= 80)
# 수학 점수가 90점 이상이거나 영어점수가 90점 이상인 경우
exam %>% filter(math >= 90 | english >= 90)
# 영어점수가 90점 미만이거나 과학점수가 50점 미만인 경우
exam %>% filter(english < 90 | science < 50)
# 목록에 해당되는 행 추출하기
exam %>% filter(class == 1 | class == 3 | class == 5)  # 1, 3, 5 반에 해당되면 추출
# %in% 연산자 이용하기
exam %>% filter(class %in% c(1,3,5))  # 1, 3, 5 반에 해당하면 추출
# 추출한 행으로 데이터 만들기
class1 <- exam %>% filter(class == 1)  # class가 1인 행 추출, class1에 할당
exam %>% filter(class == 1)
# dplyr 함수 조합하기
# class가 1인 행만 추출한 다음 english 추출
exam %>% filter(class == 1) %>% select(english)
# 가독성 있게 줄 바꾸기
exam %>%
filter(class == 1) %>%  # class가 1인 행 추출
select(english)         # english 추출
data(iris)
iris
iris %>% pull(Species)
iris %>% select(Species)
str(iris)
iris %>% select_if(is.numeric)
iris
iris %>% select(-Sepal.Length, -Petal.Length)
iris
# Select column whose name starts with "Petal"
iris %>% select(starts_with("Petal"))
iris %>% select(starts_with("petal"))
iris %>% select(starts_with("Petal", ignore.case=T))
iris %>% select(starts_with("Petal", ignore.case=F))
iris %>% select(starts_with("Petal", ignore.case=T))
iris %>% select(starts_with("petal", ignore.case=T))
iris %>% select(starts_with("petal", ignore.case=F))
# Select columns whose name maches a regular expression
iris %>% select(matches(".t."))
iris %>% select(one_of("aa", "bb", "Petal.Length", "Petal.Width"))
exam %>% summarise(n = n()) # n() = 행의갯수 row number
exam %>% tally()
exam %>% summarise(mean_math = mean(math))  # math 평균 산출
mean(exam$math)
exam %>%
group_by(class)
exam %>%
group_by(class) %>% summarise(n = n())
exam %>%
group_by(class) %>% tally()
exam %>% count(class)
exam %>%
group_by(class) %>%                # class별로 분리
summarise(mean_math = mean(math))
exam %>%
group_by(class) %>%                   # class별로 분리
summarise(mean_math = mean(math),     # math 평균
sum_math = sum(math),       # math 합계
median_math = median(math), # math 중앙값
n = n())
emp <- dbReadTable(conn, "emp")
emp
warings()
warnings()
emp
# 문제1
emp %>% filer(job == "MANAGER")
# 문제1
emp %>% filter(job == "MANAGER")
# 문제2
emp %>% select(empno, ename, sal)
# 문제3
emp %>% select(-empno)
# 문제4
emp %>% select(ename, sal)
# 문제5
emp %>% group_by(job)
# 문제5
emp %>% group_by(job) %>% summarise(n = n())
emp %>% group_by(job) %>% tally
emp %>% group_by(job) %>% tally()
emp %>% count(job)
# 문제6
emp %>% filter(sal >=1000 & sal <=3000) %>% select(ename, sal, deptno)
emp %>%
filter(sal >=1000 & sal <=3000) %>%
select(ename, sal, deptno)
# 문제7
emp %>%
filter(job != "ANALYST") %>%
select(ename, job, sal)
# 문제8
emp %>%
filter(job == "SALESMAN"| job == "ANALYST") %>%
select(ename, job)
# 문제9
emp %>%
group_by(deptno) %>%
summarise(sum_sal = sum(sal))
emp
# 문제10
emp %>% arrange(sal, decs=T)
emp %>% arrange(desc(sal))
# 문제10
emp %>% arrange(sal)
# 문제11
emp %>% arrange(sal) %>% tail(1)
emp %>% arrange(desc(sal)) %>% head(1)
# 문제12
emp %>% mutate(sal = salary)
# 문제12
emp %>% rename(sal,salary)
# 문제12
rename(emp, sal = salary, comm = commrate)
# 문제12
rename(emp, salary = sal)
# 문제12
rename(emp, salary = sal, commrate = comm)
# 문제12
empnew <- rename(emp, salary = sal, commrate = comm)
empnew
emp <- dbReadTable(conn, "emp")
emp
# 문제13
emp %>%
group_by(deptno) %>%
summarise(n = n())
# 문제13
emp %>%
group_by(deptno) %>%
summarise(n = n()) %>%
max(n)
# 문제13
emp %>%
count(deptno)
# 문제13
emp %>%
arrange(deptno)
# 문제13
emp %>%
arrange(count(deptno))
# 문제13
emp %>%
count(deptno) %>%
arrange(deptno)
# 문제13
emp %>%
count(deptno) %>%
arrange(n)
# 문제13
emp %>%
count(deptno) %>%
arrange(n) %>%
tail()
# 문제13
emp %>%
count(deptno) %>%
arrange(n) %>%
tail(1)
# 문제13
emp %>%
count(deptno) %>%
arrange(n) %>%
tail(1) %>%
filter(deptno)
# 문제13
emp %>%
count(deptno) %>%
arrange(n) %>%
tail(1) %>%
select(deptno)
emp %>%
count(deptno) %>%
arrange(n) %>%
tail(1) %>%
select(deptno)
# 집단별로 요약하기
exam %>%
group_by(class) %>% summarise(n = n())
exam %>%
group_by(class) %>% tally()
exam %>% count(class)         # count() is a short-hand for group_by() + tally()
