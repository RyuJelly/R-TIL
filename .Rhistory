lng <- sapply(storePage,function(x){x$getElementAttribute("data-long")})
#병합
starbucks <- rbind(starbucks ,cbind(shopname, addr, telephone, lat, lng))
#스크롤 다운
if(index %% 3 == 0 && index != total)
remDr$executeScript("var dom=document.querySelectorAll('#mCSB_3_container > ul > li')[arguments[0]]; dom.scrollIntoView();", list(index))
}
write.csv(starbucks, "starbucks.csv")
install.packages("rJava")
install.packages("RJDBC")
install.packages("DBI")
library(rJava)
library(RJDBC)
library(DBI)
drv <- JDBC(driverClass = 'org.mariadb.jdbc.Driver', 'mariadb-java-client-2.6.2.jar')
conn <- dbConnect(drv, 'jdbc:mariadb://127.0.0.1:3306/work', 'scott', 'tiger')
query <- "select * from goods"
goodsAll <- dbGetQuery(conn, query)
goodsAll
dbReadTable(conn, "goods")
query = "select * from goods where su >=3"
goodsOne <- dbGetQuery(conn,query)
goodsOne
query = "select *from goods order by dan desc"
dbGEtQuery(conn, query)
dbGetQuery(conn, query)
insert.df <- data.frame(code=5, name='식기 세척기', su=1, dan=250000)
dbwriteTable(conn, "goods", insert.df)
dbWriteTable(conn, "goods", insert.df)
dbWriteTable(conn, "goods1", insert.df)
query <- "select * from goods1"
goodsAll <- dbGetQuery(conn, query)
goodsAll
dbReadTable(conn, 'goods1')
# csv 파일의 자료를 테이블에 저장하기
recode <- read.csv("/data/recode.csv")
# csv 파일의 자료를 테이블에 저장하기
recode <- read.csv("\data\recode.csv")
# csv 파일의 자료를 테이블에 저장하기
recode <- read.csv("data\recode.csv")
# csv 파일의 자료를 테이블에 저장하기
recode <- read.csv("C:\Rexam\data\recode.csv")
# csv 파일의 자료를 테이블에 저장하기
recode <- read.csv("C:/Rexam/data/recode.csv")
dbWriteTable(conn, "goods2", recode)
query = "select * from goods2"
goodsAll <- dbGetQuery(conn, query)
goodsAll
# 테이블에 자료 추가, 수정, 삭제하기
query = "insert into goods2 values(6, 'test', 1, 1000)"
dbSendUpdate(conn, query)
query = "select *from goods2"
goodsAll <- dbGetQuery(conn, query)
goodsAll
query = "updae goods2 set name = '테스트' where conde = 6"
dbSendUpdate(conn, query)
query = "update goods2 set name = '테스트' where conde = 6"
dbSendUpdate(conn, query)
query = "update goods2 set name = '테스트' where code = 6"
dbSendUpdate(conn, query)
query = "select *from goods2"
goodsAll <- dbGetQuery(conn, query)
goodsAll
query = "delete goods2 set name = '테스트' where code = 6"
dbSendUpdate(conn, delquery)
query = "select *from goods2"
goodsAll <- dbGetQuery(conn, query)
goodsAll
delquery = "delete goods2 set name = '테스트' where code = 6"
dbSendUpdate(conn, delquery)
query = "select *from goods2"
goodsAll <- dbGetQuery(conn, query)
goodsAll
delquery = "delete goods2 where code = 6"
dbSendUpdate(conn, delquery)
delquery = "delete from goods2 where code = 6"
dbSendUpdate(conn, delquery)
query = "select *from goods2"
goodsAll <- dbGetQuery(conn, query)
goodsAll
query = "update goods2 set name= '테스트' where code = 6"
dbSendQuery(conn, query)
goodsAll
# 테이블에 자료 추가, 수정, 삭제하기
query = "insert into goods2 values(6, 'test', 1, 1000)"
dbSendUpdate(conn, query)
query = "select *from goods2"
goodsAll <- dbGetQuery(conn, query)
goodsAll
query = "update goods2 set name= '테스트' where code = 6"
dbSendQuery(conn, query)
query = "select *from goods2"
goodsAll <- dbGetQuery(conn, query)
goodsAll
delquery = "delete from goods2 where code = 6"
dbSendUpdate(conn, delquery)
query = "select *from goods2"
goodsAll <- dbGetQuery(conn, query)
goodsAll
dbSendUpdate(conn, "drop table goods2")
goodsAll
mtcars
dbWriteTable(conn, "mtcars", mtcars[1:5, ])
dbReadTable(conn, "mtcars")
dbWriteTable(conn, "mtcars", mtcars[6:10, ], append = TRUE)
dbReadTable(conn, "mtcars")
dbWriteTable(conn, "mtcars", mtcars[1:2, ], overwrite = TRUE)
dbReadTable(conn, "mtcars")
dbWriteTable(conn,"cars",head(cars,3))
dbGetQuery(conn, "SELECT * FROM cars")
mtcars
cars
dbWriteTable(conn,"cars",head(cars,3))
dbGetQuery(conn, "SELECT * FROM cars")
# 데이터 수정
dbSendUpdate(conn,"INSERT INTO cars(speed, dist) VALUES(1,1)")
dbSendUpdate(conn,"INSERT INTO cars(speed, dist) VALUES(2,2)")
dbReadTable(conn,"cars")
dbSendUpdate(conn,"UPDATE CARS SET DIST=DIST*100 WHERE SPEED =1")
dbReadTable(conn,"cars")
dbSendUpdate(conn,"UPDATE CARS SET DIST=DIST*3 WHERE SPEED =1")
dbReadTable(conn,"cars")
# 테이블 삭제
dbRemoveTable(conn,"cars")
cars
dbReadTable(conn,"cars")
# (1)
str(iris)
head(iris)
head(iris, 6)
# (2)
iris.name(slength)
# (2)
cname(iris,slength)
# (2)
names(iris) <- c(slength, swidth, plength, pwidth, species)
names(iris)
# (2)
names(iris) <- c("slength", "swidth", "plength", "pwidth", "species")
names(iris)
# (3)
dbWriteTable(conn, "iris",iris)
dbReadTable(conn, "iris")
# (4)
query = "select *from iris"
iris_all <- dbGetQuery(conn, query)
iris_all
# (5)
query = "select species = 'setosa' from iris"
iris_setosa <- dbGetQuery(conn, query)
iris_setosa
# (5)
query = "select *from iris where species == 'setosa'"
iris_setosa <- dbGetQuery(conn, query)
# (5)
query = "select *from iris where species == setosa"
iris_setosa <- dbGetQuery(conn, query)
# (5)
query = "select *from iris where species = setosa"
iris_setosa <- dbGetQuery(conn, query)
# (5)
query = "select *from iris where species = 'setosa'"
iris_setosa <- dbGetQuery(conn, query)
iris_setosa
# (6)
query = "select *from iris wher species = 'virginica'"
iris_versicolor <- dbGetQuery(conn, query)
# (6)
query = "select *from iris where species = 'virginica'"
iris_versicolor <- dbGetQuery(conn, query)
iris_versicolor
iris
# (6)
query = "select *from iris where species = 'versicolor'"
iris_versicolor <- dbGetQuery(conn, query)
iris_versicolor
# (7)
query = "select *from iris where species = 'virginica'"
iris_virginica <- dbGetQuery(conn, query)
iris_virginica
# (8)
recode <- read.table("data/product_click.log")
recode
dbWriteTable(conn, "productlog", recode)
dbWriteTable(conn, "productdf", recode)
names(productdf) <- c("clicktime", "pid")
dbWriteTable
productdf
# (8)
recode <- read.table("data/product_click.log")
dbWriteTable(conn, "productdf", recode)
recode
type(recode)
Type(recode)
dbRemoveTable(conn,"productdf")
dbRemoveTable(conn,"productlog")
# (8)
recode <- read.table("data/product_click.log")
dbWriteTable(conn, "productdf", recode)
names(productdf)
dbReadTable(conn, "productdf")
# (9)
names(productdf) <- c("clicktime", "pid")
# (8)
productdf <- data.frame("data/product_click.log")
# (9)
names(productdf) <- c("clicktime", "pid")
names(productdf)
productdf
# (8)
productdf <- data.frame(read.table("data/product_click.log"))
names(productdf)
read.table("data/product_click.log")
# (9)
names(productdf) <- c("clicktime", "pid")
names(productdf)
# (10)
dbWriteTable(conn, "productlog", productdf)
productlog
dbReadTable(conn, "productlog")
# (11)
query <- "select *form productlog where pid = 'p003'"
p003 <- dbGetQuery(conn, query)
# (11)
query <- "select *form productlog where pid = 'p003'"
p003 <- dbGetQuery(conn, query)
# (11)
query <- "select *from productlog where pid = 'p003'"
p003 <- dbGetQuery(conn, query)
p003
# (12)
emp <- data.frame(read.csv("data/emp.csv"))
# (13)
dbWriteTable(conn, "emp", emp)
emp
# (14)
query <- "select *from emp order by sal desc"
result1 <- dbGetQuery(conn, query)
result1
# (15)
query <- "select *from emp order by hiredate"
result2 <- dbGetQuery(conn, query)
# (15)
query <- "select *from emp order by hiredate desc"
result2 <- dbGetQuery(conn, query)
result2
# (15)
query <- "select *from emp order by hiredate asc"
result2 <- dbGetQuery(conn, query)
result2
# (16)
query <- "select *from emp where sal >= 2000"
result3 <- dbGetQuery(conn, query)
result3
# (17)
query <- "select *from emp where sal >=2000 & sal <=3000"
result4 <- dbGetQuery(conn, query)
result4
# (17)
query <- "select *from emp where 2000<= sal <= 3000"
result4 <- dbGetQuery(conn, query)
result4
# (17)
query <- "select *from emp where sal >= 2000 && sal <= 3000"
result4 <- dbGetQuery(conn, query)
result4
dbRemoveTable(conn, "productdf")
# (8)
productdf <- read.table("data/product_click.log")
# (9)
names(productdf) <- c("clicktime", "pid")
# (10)
dbWriteTable(conn, "productlog", productdf)
dbRemoveTable(conn, "productlog")
# (10)
dbWriteTable(conn, "productlog", productdf)
# (11)
query <- "select *from productlog where pid = 'p003'"
dbReadTable(conn, "productlog")
# (11)
query <- "select *from productlog where pid = 'p003'"
p003 <- dbGetQuery(conn, query)
p003
result1
emp
weight <- c(65.4, 55, 380, 72.2, 51, NA)
height <- c(170, 155, NA, 173, 161, 166)
gender <- c("M", "F","M","M","F","F")
df <- data.frame(w=weight, h=height)
df
apply(df, 1, sum, na.rm=TRUE)
apply(df, 2, sum, na.rm=TRUE)
lapply(df, sum, na.rm=TRUE)
sapply(df, sum, na.rm=TRUE)
tapply(1:6, gender, sum, na.rm=TRUE)
tapply(df$w, gender, mean, na.rm=TRUE)
mapply(paste, 1:5, LETTERS[1:5], month.abb[1:5])
tapply(1:6, gender, sum, na.rm=TRUE)
tapply(df$w, gender, mean, na.rm=TRUE)
mapply(paste, 1:5, LETTERS[1:5], month.abb[1:5])
v<-c("abc", "DEF", "TwT")
sapply(v, function(d) paste("-",d,"-", sep=""))
l<-list("abc", "DEF", "TwT")
sapply(l, function(d) paste("-",d,"-", sep=""))
lapply(l, function(d) paste("-",d,"-", sep=""))
flower <- c("rose", "iris", "sunflower", "anemone", "tulip")
length(flower)
nchar(flower)
sapply(flower, function(d) if(nchar(d) > 5) return(d))
sapply(flower, function(d) if(nchar(d) > 5) d)
sapply(flower, function(d) if(nchar(d) > 5) return(d) else return(NA))
sapply(flower, function(d) paste("-",d,"-", sep=""))
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d))
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d), 3)
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d), n=4)
count <- 1
myf <- function(x, wt=T){
print(paste(x,"(",count,")"))
Sys.sleep(3)
if(wt)
r <- paste("*", x, "*")
else
r <- paste("#", x, "#")
count <<- count + 1;
return(r)
}
result <- sapply(df$w, myf)
df
r
length(result)
result
sapply(df$w, myf, F)
sapply(df$w, myf, wt=F)
rr1 <- sapply(df$w, myf, wt=F)
str(rr1)
result
count <- 1
sapply(df, myf)
rr2 <- sapply(df, myf)
str(rr2)
rr2[1,1]
rr2[1,"w"]
(today <- Sys.Date())
format(today, "%Y년 %m월 %d일%")
format(today, "%d일 %B %Y년")
format(today, "%y")
format(today, "%Y")
format(today, "%B")
format(today, "%a")
format(today, "%A")
weekdays(today)
months(today)
quarters(today)
unclass(today)  # 1970-01-01을 기준으로 얼마나 날짜가 지났지는 지의 값을 가지고 있다.
Sys.Date()
Sys.time()
Sys.timezone()
as.Date('1/15/2018',format='%m/%d/%Y') # format 은 생략 가능
as.Date('4월 26, 2018',format='%B %d, %Y')
as.Date('110228',format='%d%b%y')
as.Date('11228',format='%d%b%y')
as.Date('110228',format='%d%m%y')
as.Date('11228',format='%d%b%y')
as.Date('110228',format='%d%B%y')
as.Date('11228',format='%d%b%y')
x1 <- "2019-01-10 13:30:41"
# 문자열을 날짜형으로
as.Date(x1, "%Y-%m-%d %H:%M:%S")
# 문자열을 날짜+시간형으로
strptime(x1, "%Y-%m-%d %H:%M:%S")
strptime('2019-08-21 14:10:30', "%Y-%m-%d %H:%M:%S")
v <- sample(1:26, 10)
v
a <- sapply(v, function(x) {LETTERS[x]})
a
print(a)
v <- sample(1:26, 10)
a <- sapply(v, function(x) {LETTERS[x]})
print(a)
v <- sample(1:26, 10)
a <- sapply(v, function(x) {LETTERS[x]})
print(v)
print(a)
read.table("data/memo.txt")
# csv 파일의 자료를 테이블에 저장하기
recode <- read.csv("data/recode.csv")
dbWriteTable(conn, "goods2", recode)
query = "select * from goods2"
goodsAll <- dbGetQuery(conn, query)
goodsAll
v <- read.table("data/memo.txt")
v <- read.socket(memo.txt)
v <- read.socket("data/memo.txt")
v <- read.socket("data/memo.txt")
v <- readLines("data/memo.txt")
v
v <- readLines("data/memo.txt", encoding = 'UTF-8')
v
v <- readLines("data/memo.txt", encoding = 'UTF-8')
v <- readLines("data/memo.txt", encoding = 'UTF-8')
v <- readLines("data/memo.txt", encoding = 'UTF-8')
v
memo_new <- NULL
new <- gsub("[[:punct:]]", "", v[1])
new
if(i == 1) new <- gsub("[[::]]", "", v[i])
v <- readLines("data/memo.txt", encoding = 'UTF-8')
memo_new <- NULL
new <- gsub("[[:punct:]]", "", v[1])
for(i in 1:length(v)){
if(i == 1) new <- gsub("[[:punct:]]", "", v[i])
if(i == 2) new <- gsub("[[:lower:]]", "[[:upper:]]", v[i])
if(i == 3) new <- gsub("[[:digit:]]", "", v[i])
if(i == 4) new <- gsub("[[:upper:][:lower:]]", "", v[i])
if(i == 5) new <- gsub("[[:punct:][:digit:]]", "", v[i])
if(i == 6) new <- gsub("[[:space:]]", "", v[i])
if(i == 7) new <- gsub("[[:upper:]]", "[[:lower:]]", v[i])
memo_new <- append(memo_new, new)
}
write(memo_new, "memo_new.txt")
v <- readLines("data/memo.txt", encoding = 'UTF-8')
memo_new <- NULL
new <- gsub("[[:punct:]]", "", v[1])
for(i in 1:length(v)){
if(i == 1) new <- gsub("[[:punct:]]", "", v[i])
if(i == 2) new <- gsub("[[:lower:]]", "[:upper:]", v[i])
if(i == 3) new <- gsub("[[:digit:]]", "", v[i])
if(i == 4) new <- gsub("[[:upper:][:lower:]]", "", v[i])
if(i == 5) new <- gsub("[[:punct:][:digit:]]", "", v[i])
if(i == 6) new <- gsub("[[:space:]]", "", v[i])
if(i == 7) new <- gsub("[[:upper:]]", "[[:lower:]]", v[i])
memo_new <- append(memo_new, new)
}
write(memo_new, "memo_new.txt")
if(i == 2) new <- gsub("[[:lower:]]", [[:upper:]], v[i])
if(i == 2) new <- gsub("[[:lower:]]", "[A-Z]", v[i])
v <- readLines("data/memo.txt", encoding = 'UTF-8')
memo_new <- NULL
new <- gsub("[[:punct:]]", "", v[1])
for(i in 1:length(v)){
if(i == 1) new <- gsub("[[:punct:]]", "", v[i])
if(i == 2) new <- gsub("[[:lower:]]", "[A-Z]", v[i])
if(i == 3) new <- gsub("[[:digit:]]", "", v[i])
if(i == 4) new <- gsub("[[:upper:][:lower:]]", "", v[i])
if(i == 5) new <- gsub("[[:punct:][:digit:]]", "", v[i])
if(i == 6) new <- gsub("[[:space:]]", "", v[i])
if(i == 7) new <- gsub("[[:upper:]]", "[a-z]", v[i])
memo_new <- append(memo_new, new)
}
write(memo_new, "memo_new.txt")
v <- readLines("data/memo.txt", encoding = 'UTF-8')
memo_new <- NULL
new <- gsub("[[:punct:]]", "", v[1])
for(i in 1:length(v)){
if(i == 1) new <- gsub("[[:punct:]]", "", v[i])
if(i == 2) new <- gsub("[a-z]", "[A-Z]", v[i])
if(i == 3) new <- gsub("[[:digit:]]", "", v[i])
if(i == 4) new <- gsub("[[:upper:][:lower:]]", "", v[i])
if(i == 5) new <- gsub("[[:punct:][:digit:]]", "", v[i])
if(i == 6) new <- gsub("[[:space:]]", "", v[i])
if(i == 7) new <- gsub("[A-Z]", "[a-z]", v[i])
memo_new <- append(memo_new, new)
}
write(memo_new, "memo_new.txt")
memo_new
v <- readLines("data/memo.txt", encoding = 'UTF-8')
memo_new <- NULL
new <- gsub("[[:punct:]]", "", v[1])
for(i in 1:length(v)){
if(i == 1) new <- gsub("[[:punct:]]", "", v[i])
if(i == 2) new <- gsub("[[:lower:]]", "[[:upper:]]", v[i])
if(i == 3) new <- gsub("[[:digit:]]", "", v[i])
if(i == 4) new <- gsub("[[:upper:][:lower:]]", "", v[i])
if(i == 5) new <- gsub("[[:punct:][:digit:]]", "", v[i])
if(i == 6) new <- gsub("[[:space:]]", "", v[i])
if(i == 7) new <- gsub("[[:upper:]]", "[[:lower:]]", v[i])
memo_new <- append(memo_new, new)
}
write(memo_new, "memo_new.txt")
memo_new
v <- readLines("data/memo.txt", encoding = 'UTF-8')
memo_new <- NULL
for(i in 1:length(v)){
if(i == 1) new <- gsub("[[:punct:]]", "", v[i])
if(i == 2) new <- gsub("[[:lower:]]", "[[:upper:]]", v[i])
if(i == 3) new <- gsub("[[:digit:]]", "", v[i])
if(i == 4) new <- gsub("[[:upper:][:lower:]]", "", v[i])
if(i == 5) new <- gsub("[[:punct:][:digit:]]", "", v[i])
if(i == 6) new <- gsub("[[:space:]]", "", v[i])
if(i == 7) new <- gsub("[[:upper:]]", "[[:lower:]]", v[i])
memo_new <- append(memo_new, new)
}
write(memo_new, "memo_new.txt")
memo_new
v <- readLines("data/memo.txt", encoding = 'UTF-8')
memo_new <- NULL
for(i in 1:length(v)){
if(i == 1) new <- gsub("[[:punct:]]", "", v[i])
if(i == 2) new <- gsub("[[:lower:]]", replacement = "[[:upper:]]", v[i])
if(i == 3) new <- gsub("[[:digit:]]", "", v[i])
if(i == 4) new <- gsub("[[:upper:][:lower:]]", "", v[i])
if(i == 5) new <- gsub("[[:punct:][:digit:]]", "", v[i])
if(i == 6) new <- gsub("[[:space:]]", "", v[i])
if(i == 7) new <- gsub("[[:upper:]]", replacement = "[[:lower:]]", v[i])
memo_new <- append(memo_new, new)
}
write(memo_new, "memo_new.txt")
memo_new
v <- sample(1:26, 10)
a <- sapply(v, function(x) {LETTERS[x]})
print(v)
print(a)
